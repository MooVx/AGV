;; Auto-generated. Do not edit!


(when (boundp 'steward::MotorsGoal)
  (if (not (find-package "STEWARD"))
    (make-package "STEWARD"))
  (shadow 'MotorsGoal (find-package "STEWARD")))
(unless (find-package "STEWARD::MOTORSGOAL")
  (make-package "STEWARD::MOTORSGOAL"))

(in-package "ROS")
;;//! \htmlinclude MotorsGoal.msg.html


(defclass steward::MotorsGoal
  :super ros::object
  :slots (_goal_velocity _angle_limits _Y_limits ))

(defmethod steward::MotorsGoal
  (:init
   (&key
    ((:goal_velocity __goal_velocity) 0)
    ((:angle_limits __angle_limits) 0.0)
    ((:Y_limits __Y_limits) 0.0)
    )
   (send-super :init)
   (setq _goal_velocity (round __goal_velocity))
   (setq _angle_limits (float __angle_limits))
   (setq _Y_limits (float __Y_limits))
   self)
  (:goal_velocity
   (&optional __goal_velocity)
   (if __goal_velocity (setq _goal_velocity __goal_velocity)) _goal_velocity)
  (:angle_limits
   (&optional __angle_limits)
   (if __angle_limits (setq _angle_limits __angle_limits)) _angle_limits)
  (:Y_limits
   (&optional __Y_limits)
   (if __Y_limits (setq _Y_limits __Y_limits)) _Y_limits)
  (:serialization-length
   ()
   (+
    ;; int16 _goal_velocity
    2
    ;; float32 _angle_limits
    4
    ;; float32 _Y_limits
    4
    ))
  (:serialize
   (&optional strm)
   (let ((s (if strm strm
              (make-string-output-stream (send self :serialization-length)))))
     ;; int16 _goal_velocity
       (write-word _goal_velocity s)
     ;; float32 _angle_limits
       (sys::poke _angle_limits (send s :buffer) (send s :count) :float) (incf (stream-count s) 4)
     ;; float32 _Y_limits
       (sys::poke _Y_limits (send s :buffer) (send s :count) :float) (incf (stream-count s) 4)
     ;;
     (if (null strm) (get-output-stream-string s))))
  (:deserialize
   (buf &optional (ptr- 0))
   ;; int16 _goal_velocity
     (setq _goal_velocity (sys::peek buf ptr- :short)) (incf ptr- 2)
   ;; float32 _angle_limits
     (setq _angle_limits (sys::peek buf ptr- :float)) (incf ptr- 4)
   ;; float32 _Y_limits
     (setq _Y_limits (sys::peek buf ptr- :float)) (incf ptr- 4)
   ;;
   self)
  )

(setf (get steward::MotorsGoal :md5sum-) "d8d57bb6887a089db071ec31ad56c0e1")
(setf (get steward::MotorsGoal :datatype-) "steward/MotorsGoal")
(setf (get steward::MotorsGoal :definition-)
      "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
int16 goal_velocity
float32 angle_limits
float32 Y_limits

")



(provide :steward/MotorsGoal "d8d57bb6887a089db071ec31ad56c0e1")


