// Generated by gencpp from file steward/MotorsGoal.msg
// DO NOT EDIT!


#ifndef STEWARD_MESSAGE_MOTORSGOAL_H
#define STEWARD_MESSAGE_MOTORSGOAL_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace steward
{
template <class ContainerAllocator>
struct MotorsGoal_
{
  typedef MotorsGoal_<ContainerAllocator> Type;

  MotorsGoal_()
    : goal_velocity(0)
    , angle_limits(0.0)
    , Y_limits(0.0)  {
    }
  MotorsGoal_(const ContainerAllocator& _alloc)
    : goal_velocity(0)
    , angle_limits(0.0)
    , Y_limits(0.0)  {
  (void)_alloc;
    }



   typedef int16_t _goal_velocity_type;
  _goal_velocity_type goal_velocity;

   typedef float _angle_limits_type;
  _angle_limits_type angle_limits;

   typedef float _Y_limits_type;
  _Y_limits_type Y_limits;




  typedef boost::shared_ptr< ::steward::MotorsGoal_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::steward::MotorsGoal_<ContainerAllocator> const> ConstPtr;

}; // struct MotorsGoal_

typedef ::steward::MotorsGoal_<std::allocator<void> > MotorsGoal;

typedef boost::shared_ptr< ::steward::MotorsGoal > MotorsGoalPtr;
typedef boost::shared_ptr< ::steward::MotorsGoal const> MotorsGoalConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::steward::MotorsGoal_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::steward::MotorsGoal_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace steward

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'actionlib_msgs': ['/opt/ros/kinetic/share/actionlib_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'steward': ['/home/agv/AGV/Pepperl/src/steward/msg', '/home/agv/AGV/Pepperl/devel/share/steward/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::steward::MotorsGoal_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::steward::MotorsGoal_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::steward::MotorsGoal_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::steward::MotorsGoal_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::steward::MotorsGoal_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::steward::MotorsGoal_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::steward::MotorsGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "d8d57bb6887a089db071ec31ad56c0e1";
  }

  static const char* value(const ::steward::MotorsGoal_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xd8d57bb6887a089dULL;
  static const uint64_t static_value2 = 0xb071ec31ad56c0e1ULL;
};

template<class ContainerAllocator>
struct DataType< ::steward::MotorsGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "steward/MotorsGoal";
  }

  static const char* value(const ::steward::MotorsGoal_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::steward::MotorsGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n\
int16 goal_velocity\n\
float32 angle_limits\n\
float32 Y_limits\n\
";
  }

  static const char* value(const ::steward::MotorsGoal_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::steward::MotorsGoal_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.goal_velocity);
      stream.next(m.angle_limits);
      stream.next(m.Y_limits);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct MotorsGoal_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::steward::MotorsGoal_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::steward::MotorsGoal_<ContainerAllocator>& v)
  {
    s << indent << "goal_velocity: ";
    Printer<int16_t>::stream(s, indent + "  ", v.goal_velocity);
    s << indent << "angle_limits: ";
    Printer<float>::stream(s, indent + "  ", v.angle_limits);
    s << indent << "Y_limits: ";
    Printer<float>::stream(s, indent + "  ", v.Y_limits);
  }
};

} // namespace message_operations
} // namespace ros

#endif // STEWARD_MESSAGE_MOTORSGOAL_H
